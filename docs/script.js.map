{"version":3,"file":"script.js","mappings":"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","sources":["webpack://@pomek/clipboard-image-resize/./src/eventemitter.js","webpack://@pomek/clipboard-image-resize/./src/utils/mix.js","webpack://@pomek/clipboard-image-resize/./src/observable/observableset.js","webpack://@pomek/clipboard-image-resize/./src/observable/observable.js","webpack://@pomek/clipboard-image-resize/./src/observable/observableabstract.js","webpack://@pomek/clipboard-image-resize/./src/utils/debounce.js","webpack://@pomek/clipboard-image-resize/./src/observable/observableinput.js","webpack://@pomek/clipboard-image-resize/./src/index.js","webpack://@pomek/clipboard-image-resize/./src/observable/observablecheckbox.js"],"sourcesContent":["const eventSymbol = Symbol( 'events-collection' );\n\n/**\n * @type {Object}\n */\nconst EmitterMixin = {\n\t/**\n\t * @param {String} name\n\t * @param {Function} callback\n\t */\n\ton( name, callback ) {\n\t\tconst events = this._getEvent( name );\n\t\tevents.push( callback );\n\t},\n\n\toff( name, callback ) {\n\t\tconst events = this._getEvent( name );\n\t\tconst index = events.indexOf( callback );\n\n\t\tevents.splice( index, 1 );\n\t},\n\n\tfire( name, ...data ) {\n\t\tfor ( const callback of this._getEvent( name ) ) {\n\t\t\tcallback( { name }, ...data );\n\t\t}\n\t},\n\n\tget _events() {\n\t\tif ( !this[ eventSymbol ] ) {\n\t\t\tObject.defineProperty( this, eventSymbol, {\n\t\t\t\tvalue() {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this[ eventSymbol ];\n\t},\n\n\t_getEvent( name ) {\n\t\tif ( !this._events[ name ] ) {\n\t\t\tthis._events[ name ] = [];\n\t\t}\n\n\t\treturn this._events[ name ];\n\t}\n};\n\nexport default EmitterMixin;\n\n/**\n * @interface Eventable\n */\n\n/**\n * @function\n * @name Eventable#on\n */\n\n/**\n * @function\n * @name Eventable#off\n */\n\n/**\n * @function\n * @name Eventable#fire\n */\n","/**\n * Source: https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-utils/src/mix.js.\n *\n * @param {Function} baseClass\n * @param {Function|Object} [...mixins]\n */\nexport default function mix( baseClass, ...mixins ) {\n\tmixins.forEach( mixin => {\n\t\tObject.getOwnPropertyNames( mixin )\n\t\t\t.forEach( key => {\n\t\t\t\tif ( key in baseClass.prototype ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceDescriptor = Object.getOwnPropertyDescriptor( mixin, key );\n\t\t\t\tsourceDescriptor.enumerable = false;\n\n\t\t\t\tObject.defineProperty( baseClass.prototype, key, sourceDescriptor );\n\t\t\t} );\n\t} );\n}\n","import EventEmitter from '../eventemitter';\nimport mix from '../utils/mix';\n\n/**\n * The `Set` collection on steroids emits events when a new item is being added or removed.\n *\n * @implements {Eventable}\n * @extends {Set}\n */\nexport default class ObservableSet extends Set {\n\tconstructor( items ) {\n\t\tsuper( items );\n\t}\n\n\t/**\n\t * @param {*} item\n\t */\n\tadd( item ) {\n\t\tsuper.add( item );\n\t\tthis.fire( 'add', item );\n\t}\n\n\t/**\n\t * @param {*} item\n\t */\n\tdelete( item ) {\n\t\tsuper.delete( item );\n\t\tthis.fire( 'delete', item );\n\t}\n}\n\nmix( ObservableSet, EventEmitter );\n","import EventEmitter from '../eventemitter';\nimport mix from '../utils/mix'\n\n/**\n * An instance of the `Observable` class allow listening for changes regarding its value.\n *\n * @implements {Eventable}\n * @extends {Set}\n */\nexport default class Observable {\n\tconstructor( value ) {\n\t\tthis._value = value;\n\t}\n\n\tget() {\n\t\treturn this._value;\n\t}\n\n\tset( value ) {\n\t\tif ( this._value === value ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldValue = this.get();\n\n\t\tthis._value = value;\n\n\t\tthis.fire( 'change', {\n\t\t\toldValue,\n\t\t\tnewValue: value\n\t\t} )\n\t}\n\n}\n\nmix( Observable, EventEmitter );\n","import EventEmitter from '../eventemitter';\nimport mix from '../utils/mix'\nimport debounce from '../utils/debounce';\nimport Observable from './observable';\n\n/**\n * An abstract observable for `HTMLInputElement`.\n *\n * @abstract\n * @implements {Eventable}\n */\nexport default class ObservableAbstract {\n\t/**\n\t * @param {HTMLInputElement} element\n\t * @param {Object} [options={}]\n\t * @param {Number} [options.delay]\n\t * @param {*} [options.defaultValue=null]\n\t */\n\tconstructor( element, options = {} ) {\n\t\tthis._element = element;\n\t\tthis._options = options;\n\t\tthis._observable = new Observable( this._defaultValue );\n\t}\n\n\tget value() {\n\t\treturn this._observable.get();\n\t}\n\n\tget _defaultValue() {\n\t\treturn this._options.defaultValue || null;\n\t}\n\n\tattach() {\n\t\t// Prepare the initial state of the input..\n\t\tif ( this._getInputValue() !== this.value ) {\n\t\t\tthis._synchronizeElementValue();\n\t\t}\n\n\t\t// React when typing in the input element.\n\t\tconst delay = this._options.delay || 250;\n\n\t\tthis._element.addEventListener( this._getInputEvent(), debounce( () => {\n\t\t\tthis._observable.set( this._getInputValue() );\n\t\t}, delay ) );\n\n\t\t// Fire an event when updating the value.\n\t\tthis._observable.on( 'change', ( event, details ) => {\n\t\t\t// If modified directly via API (not the element), update the element value too.\n\t\t\tif ( this._getInputValue() !== this.value ) {\n\t\t\t\tthis._synchronizeElementValue();\n\t\t\t}\n\n\t\t\tthis.fire( 'change', details );\n\t\t} );\n\n\t\t// Call the `change` event for setting up the initial state if listeners are already attached..\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * @protected\n\t * @abstract\n\t * @method\n\t * @name ObservableAbstract#_getInputEvent\n\t */\n\n\t/**\n\t * @protected\n\t * @abstract\n\t * @method\n\t * @name ObservableAbstract#_synchronizeElementValue\n\t */\n\n\t/**\n\t * @protected\n\t * @abstract\n\t * @method\n\t * @name ObservableAbstract#_getInputValue\n\t */\n}\n\nmix( ObservableAbstract, EventEmitter );\n","/**\n * @param {Function} callback\n * @param {Number} time\n * @returns {Function}\n */\nexport default function debounce( callback, time ) {\n\tlet timeout;\n\n\treturn function ( ...args ) {\n\t\tconst context = this;\n\n\t\tif ( timeout ) {\n\t\t\tclearTimeout( timeout );\n\t\t}\n\n\t\tconst fn = () => {\n\t\t\ttimeout = null;\n\t\t\tcallback.apply( context, args )\n\t\t};\n\n\t\ttimeout = setTimeout( fn, time )\n\t};\n}\n","import ObservableAbstract from './observableabstract';\n\n/**\n * The observable class for inputs with the typing feature.\n *\n * @extends {ObservableAbstract}\n */\nexport default class ObservableInput extends ObservableAbstract {\n\t_getInputEvent() {\n\t\treturn 'input';\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tget _defaultValue() {\n\t\treturn this._element.value || super._defaultValue;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\t_synchronizeElementValue() {\n\t\tthis._element.value = this.value;\n\t}\n\n\t/**\n\t * @protected\n\t * @returns {String|Number}\n\t */\n\t_getInputValue() {\n\t\tif ( this._element.type === 'number' ) {\n\t\t\treturn Number( this._element.value );\n\t\t}\n\n\t\treturn this._element.value;\n\t}\n}\n","import ObservableSet from './observable/observableset';\nimport ObservableInput from './observable/observableinput';\nimport ObservableCheckbox from './observable/observablecheckbox';\n\nconst previewElement = document.getElementById( 'canvas-preview' );\nconst progressBar = document.getElementById( 'progress-bar' );\nconst gallery = document.getElementById( 'gallery' );\n\nconst context = previewElement.getContext( '2d' );\n\nconst pastedImages = new ObservableSet();\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Canvas requires the `[width]` and `[height]` attributes to set to scale its content properly.\nconst screenWidthInput = new ObservableInput( document.getElementById( 'input-screen-width' ), {\n\tdefaultValue: screen.width\n} );\n\nconst screenHeightInput = new ObservableInput( document.getElementById( 'input-screen-height' ), {\n\tdefaultValue: screen.height\n} );\n\nscreenWidthInput.on( 'change', () => {\n\tpreviewElement.width = screenWidthInput.value;\n} );\n\nscreenHeightInput.on( 'change', () => {\n\tpreviewElement.height = screenHeightInput.value;\n} );\n\nscreenWidthInput.attach();\nscreenHeightInput.attach();\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst copyClipboardInput = new ObservableCheckbox( document.getElementById( 'resize-copy-clipboard' ), {\n\tdefaultValue: true\n} );\ncopyClipboardInput.attach();\n\npastedImages.on( 'add', ( event, item ) => {\n\tconst div = document.createElement( 'div' );\n\tdiv.classList.add( 'gallery-item' );\n\tdiv.style.backgroundImage = `url(${ item.src })`;\n\n\tgallery.appendChild( div );\n} );\n\n// Make an observable from the value.\nlet resizeValue = 75;\n\n[ ...document.querySelectorAll( '.js-resize-button' ) ].forEach( element => {\n\telement.addEventListener( 'click', () => {\n\t\tresizeValue = pxToNumber( element.getAttribute( 'data-option' ) );\n\n\t\tprogressBar.innerText = resizeValue + '%';\n\t\tprogressBar.style.width = progressBar.innerText;\n\t} )\n} );\n\nwindow.addEventListener( 'paste', ( event ) => {\n\tconst content = [ ...event.clipboardData.items ]\n\t\t.filter( item => item.kind === 'file' )\n\t\t.shift();\n\n\tif ( !content ) {\n\t\treturn;\n\t}\n\n\tconst uploadedFile = content.getAsFile();\n\n\tif ( !isImage( uploadedFile ) ) {\n\t\treturn;\n\t}\n\n\tconst reader = new FileReader();\n\tconst image = new Image();\n\n\treader.addEventListener( 'load', () => {\n\t\timage.src = reader.result;\n\t} );\n\n\timage.addEventListener( 'load', async () => {\n\t\tconst scale = resizeValue / 100;\n\t\tconst newCanvas = document.createElement('canvas');\n\t\tconst newContext = newCanvas.getContext( '2d' );\n\n\t\tnewCanvas.width = image.width * scale;\n\t\tnewCanvas.height = image.height * scale;\n\n\t\tnewContext.scale( resizeValue / 100, resizeValue / 100 );\n\t\tnewContext.drawImage( image, 0, 0 );\n\n\t\tcontext.clearRect( 0, 0, previewElement.width, previewElement.height );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tif ( copyClipboardInput.value ) {\n\t\t\tconsole.log( 'Auto-copy enabled.' );\n\t\t}\n\n\t\tconst clipboardItem = new ClipboardItem( {\n\t\t\t'image/png': new Promise( resolve => newCanvas.toBlob( resolve ) )\n\t\t} );\n\n\t\tawait navigator.clipboard.write( [ clipboardItem ] );\n\n\t\tcontext.resetTransform();\n\n\t\tpastedImages.add( image );\n\t} );\n\n\treader.readAsDataURL( uploadedFile )\n} );\n\nfunction isImage( file ) {\n\tif ( !file ) {\n\t\treturn false;\n\t}\n\n\treturn file.type === 'image/png' || file.type === 'image/jpeg';\n}\n\nfunction pxToNumber( value ) {\n\treturn Number( value.replace( 'px', '' ) );\n}\n","import ObservableAbstract from './observableabstract';\n\n/**\n * The observable class for `input[type=checkbox]` elements.\n *\n * @extends {ObservableAbstract}\n */\nexport default class ObservableCheckbox extends ObservableAbstract {\n\t_getInputEvent() {\n\t\treturn 'change';\n\t}\n\n\t/**\n\t * @protected\n\t */\n\tget _defaultValue() {\n\t\treturn this._element.checked || super._defaultValue;\n\t}\n\n\t/**\n\t * @protected\n\t */\n\t_synchronizeElementValue() {\n\t\tthis._element.checked = this.value;\n\t}\n\n\t/**\n\t * @protected\n\t * @returns {Boolean}\n\t */\n\t_getInputValue() {\n\t\treturn this._element.checked;\n\t}\n}\n\n"],"names":["eventSymbol","Symbol","on","name","callback","this","_getEvent","push","off","events","index","indexOf","splice","fire","data","_events","Object","defineProperty","value","mix","baseClass","mixins","forEach","mixin","getOwnPropertyNames","key","prototype","sourceDescriptor","getOwnPropertyDescriptor","enumerable","ObservableSet","Set","constructor","items","super","add","item","delete","Observable","_value","get","set","oldValue","newValue","ObservableAbstract","element","options","_element","_options","_observable","_defaultValue","defaultValue","attach","_getInputValue","_synchronizeElementValue","delay","addEventListener","_getInputEvent","time","timeout","args","context","clearTimeout","setTimeout","apply","debounce","event","details","ObservableInput","type","Number","previewElement","document","getElementById","progressBar","gallery","getContext","pastedImages","screenWidthInput","screen","width","screenHeightInput","height","copyClipboardInput","checked","div","createElement","classList","style","backgroundImage","src","appendChild","resizeValue","querySelectorAll","getAttribute","replace","innerText","window","content","clipboardData","filter","kind","shift","uploadedFile","getAsFile","file","reader","FileReader","image","Image","result","async","scale","newCanvas","newContext","drawImage","clearRect","console","log","clipboardItem","ClipboardItem","Promise","resolve","toBlob","navigator","clipboard","write","resetTransform","readAsDataURL"],"sourceRoot":""}